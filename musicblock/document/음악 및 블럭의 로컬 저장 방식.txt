<1차 후보 - 휘발성 있는 저장방식을 후보에서 제거해야 함>
1) 파일 입출력
   - 단일 파일(모든 음악을 한 파일에)
   - 음악과 파일을 1:1로 대응
2) localStorage
3) sessionStorage - 휘발성이므로 X
4) web sql database
5) application cache - 용량 꽉 찼을 때 의도치 않은 갱신이나 유실 가능하므로 X

<2차 후보 - 수정, 삭제를 고려해서 하나의 파일에 모두 저장하는 방식 배제>
1) 파일 입출력
   - 단일 파일(모든 음악을 한 파일에) - 곡 하나의 수정을 할 때에도 파일 전체를 read/write해야 하므로 X
   - 음악과 파일을 1:1로 대응
2) localStorage
4) web sql database

<3차 후보 - 모두 사용해도 괜찮을 듯. 장단점이 있음>
1) 파일 입출력
   - 음악과 파일을 1:1로 대응 - 가장 직관적. 하지만 파일을 여러개를 만들어야 함(어떻게 생각하면 또 mp3파일과 같이 1:1 대응이라고 생각해도 될 듯)
2) localStorage - key, value로 매우 간단, 하지만 key를 저장하는 메타데이터 저장용 파일을 추가로 만들어줘야 함
   -> 예시
     localStorage.setItem('foo', 'bar');
     localStorage.getItem('foo'); //--> "bar"
4) web sql database
   - 가장 적합할 것 같음(CRUD 모두 효율적). 하지만 생소한 거라 적용에 시간이 걸릴 듯.




<최종안>
우선 가장 적합할 것으로 보이는 web sql database를 적용해 보고, 예상치 못한 문제가 발생하면 파일 입출력 방식으로 변경할 예정.
일단은 web sql database를 적용한 샘플을 작성할 예정.
 - 로컬 음악의 저장 형태 예시
 {
 	"musicTitle":"학교종이 땡땡땡",
 	"notes":["4s,3,6,2,3,12,46,33,25,7",
 			 "4s,5,7,22,5,18,4,36,2,17,24",
 			 "8s,7,42,3,12,46,6,22,33,5,8,19,7"]
 }

* 링크
 - web sql database : http://www.sqler.com/396957
