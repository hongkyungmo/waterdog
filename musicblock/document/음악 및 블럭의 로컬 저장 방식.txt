<1차 후보 - 휘발성 있는 저장방식을 후보에서 제거해야 함>
1) 파일 입출력
   - 단일 파일(모든 음악을 한 파일에)
   - 음악과 파일을 1:1로 대응
2) localStorage
3) sessionStorage - 휘발성이므로 X
4) database
   - web sql database
   - indexedDB
5) application cache - 용량 꽉 찼을 때 의도치 않은 갱신이나 유실 가능하므로 X

<2차 후보 - 수정, 삭제를 고려해서 하나의 파일에 모두 저장하는 방식 배제>
1) 파일 입출력
   - 단일 파일(모든 음악을 한 파일에) - 곡 하나의 수정을 할 때에도 파일 전체를 read/write해야 하므로 X
   - 음악과 파일을 1:1로 대응
2) localStorage
4) database
   - web sql database
   - indexedDB

<3차 후보 - 모두 사용해도 괜찮을 듯. 장단점이 있음>
1) 파일 입출력
   - 음악과 파일을 1:1로 대응 - 가장 직관적. 하지만 파일을 여러개를 만들어야 함(어떻게 생각하면 또 mp3파일과 같이 1:1 대응이라고 생각해도 될 듯)
2) localStorage - key, value로 매우 간단, 하지만 key를 저장하는 메타데이터 저장용 파일을 추가로 만들어줘야 함
   -> 예시
     localStorage.setItem('foo', 'bar');
     localStorage.getItem('foo'); //--> "bar"
4) database
   - web sql database
   - indexedDB
   - 가장 적합할 것 같음(CRUD 모두 효율적). 하지만 생소한 거라 적용에 시간이 걸릴 듯.




<최종안 - ver 1.0>
우선 가장 적합할 것으로 보이는 web sql database를 적용해 보고, 예상치 못한 문제가 발생하면 파일 입출력 방식으로 변경할 예정.
일단은 web sql database를 적용한 샘플을 작성할 예정.
 - 로컬 음악의 저장 형태 예시
 {
 	"musicTitle":"학교종이 땡땡땡",
 	"notes":["4s,3,6,2,3,12,46,33,25,7",
 			 "4s,5,7,22,5,18,4,36,2,17,24",
 			 "8s,7,42,3,12,46,6,22,33,5,8,19,7"]
 }

* 링크
 - web sql database : http://www.sqler.com/396957

 
 
 <개선안 - ver 1.1>
 indexedDB라는 것을 알게 됨.
  -> 간단한 사용에도 기본 코드가 어느정도 작성되어야 함
 localForage : firefox에서 만든 로컬 스토리지(크로스 브라우징 가능)
  -> localStorage와는 달리 비동기식이라 버벅임이 적음
  -> 링크 : http://enzine.tistory.com/entry/localForage-더-나아진-오프라인-저장소
 
 
 <임시결정 - localForage>
 링크 : http://mozilla.github.io/localForage/
 CDN : 
https://cdnjs.cloudflare.com/ajax/libs/localforage/1.4.0/localforage.js

<다시 localStorage도 고려 중>
링크(간단한 함수 소개) : https://inswave.com/support/api/w2/2.0_1.4726B.20150210.133228/WebSquare.localStorage/WebSquare.localStorage.html
사용예제 : http://www.sqler.com/396857
채택 고려중인 이유
 - key/value로 관리되는 간단한 방식
 - 모든 데이터를 순회 가능
 - 각 데이터를 키값으로 바로 get해올 수 있음
단점
 - blocking 방식이라 DOM객체 생성하여 렌더링 시 시간 지연이 발생
시도 결과 : 시퀀스를 개발자가 직접 만들어서 적용해줘야 함.
테이블이 딱 한개만 존재한다는 개념이기 때문에 시퀀스를 딱 하나만 만들 수 있음.
그래서 우리 프로젝트의 경우는 블록시퀀스와 완성된 곡의 시퀀스가 따로 존재해야 하기 때문에
이 방식을 적용할 수가 없음.
이미 블록에의 적용은 끝났으나(emotion.html 364번 commit) 이 방식 폐기하기로 결정 ㅠㅠ

<그래서 다시 IndexedDB를 조사 중>
읽어보면 IndexedDB의 특성을 쉽게 파악할 수 있는 문서
 -> https://developer.mozilla.org/ko/docs/IndexedDB/Basic_Concepts_Behind_IndexedDB
요약 :	영구저장, key/value방식, 도메인 기준 저장(same-origin policy), 트랜잭션 개념 존재(수동커밋x, 자동커밋o), key-generator 존재(sequence)
		API대부분 비동기식(동기식은 web-worker를 위해 마련된 API)
Using-indexedDB문서 : https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB
			(한글화): https://developer.mozilla.org/ko/docs/IndexedDB/Using_IndexedDB
발표자료 : http://www.slideshare.net/freaktechnik/indexed-db-47797273
개체 만들기 및 열기
 -> https://msdn.microsoft.com/ko-kr/library/jj154905(v=vs.85).aspx
트랜잭션을 사용하여 데이터 관리
 -> https://msdn.microsoft.com/ko-kr/library/jj154909(v=vs.85).aspx
동영상 강의(영어)
 -> https://www.youtube.com/watch?v=hFLHUAuj2KE
IndexedDB 활용(블로그 글)
 -> http://yaku.tistory.com/538
 -> http://horajjan.blog.me/220300960759